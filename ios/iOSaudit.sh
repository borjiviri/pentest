#!/bin/bash
# devnull@libcrack.so
# jue may 15 03:27:07 CEST 2014
# otool -l -v binary|grep function_you_want

# if [ `whoami` != "root" ]; then
#     info "\n\t${BOLD}Necesitas ser r00t para ejecutar este script ${RESET} \n"
#     exit 2
# fi

# XXX
#
# App Entitlements
#   strings AppBinaryName | grep -A 20 <?xml

# ==[ vars ]====================================================================================================

DEBUG=

IRED="\e[0;91m"
IGREEN="\e[0;92m"
IYELLOW="\e[0;93m"
IBLUE="\e[0;94m"

RED="\e[0;31m"
GREEN="\e[0;32m"
YELLOW="\e[0;33m"
BLUE="\e[0;34m"
PURPLE="\e[0;35m"
CYAN="\e[0;36m"

BRED="\e[1;31m"
BGREEN="\e[1;32m"
BBLUE="\e[1;34m"

BOLD="\e[1m"
RESET="\e[0m"
# RESET="\033[0m"

ARC_symbols="
_objc_retain
_objc_release
_objc_autorelease
_objc_retainAutoreleasedReturnValue
_objc_retainBlock
_objc_autoreleaseReturnValue
_objc_autoreleasePoolPush
_objc_loadWeakRetained
_objc_loadWeak
_objc_destroyWeak
_objc_storeWeak
_objc_initWeak
_objc_moveWeak
_objc_copyWeak
_objc_retainedObject
_objc_unretainedObject
_objc_unretainedPointer
"
stack_symbols="
__stack_chk_guard
__stack_chk_fail
_pthread_attr_setstacksize
"
badcalls="
_malloc
_strcpy
__snprintf_chk
__sprintf_chk
__vsnprintf_chk
__vsprintf_chk
asprintf
fprintf
printf
snprintf
sprintf
swprintf
vasprintf
vfprintf
vprintf
vsnprintf
vswprintf
__snprintf_chk
__sprintf_chk
__vsnprintf_chk
__vsprintf_chk
asprintf
fprintf
printf
snprintf
sprintf
swprintf
vasprintf
vfprintf
vprintf
vsnprintf
vswprintf
"

VERSION="0.1"

# ==[ PROCEDURES ]===================================================================================================

trap captura INT
function captura {
    echo " Ctrl+C, Exiting ... "
    exit 1
}

function info {
    echo -e "[*]\033[1m ${1}\033[0m"
    #echo -e "[*]\033[4m\t> ${1}\033[0m"
    #echo -e "[*] \033[1m${1}\033[0m"
    #echo -e "\033[1m${1}\033[0m"
}

function failed {
    echo -e "[*]\t  ${BRED}[FAIL]${RESET} ${1}"
}

function success {
    #echo -e "[*] ${BOLD}${1}${RESET}"
    echo -e "[*]\t  ${BGREEN}[SUCCESS]${RESET} ${1}"
}

function check_error {
    if [ "$1" != "0" ]; then
        echo -e "${IRED}[ERROR] Error executing $!${RESET}\n"
        exit 99
    fi
}

function die {
    echo -e "\n${BRED}[ABORT]:${RESET} ${1}\n"
    exit 98
}

function banner {
    echo
    echo "Starting $0 v${VERSION} at $(date) - libcrack.so"
    echo
    echo "Search the output below for the word '[VV]' for the security issues found. "
    echo "If you don't see it then this script didn't find any problems."
    echo "Search the output below for the word '[WW]' for problems occurred during script "
    echo "execution. These problems must be checked manually."
    echo "Finally search the output below for the word '[II]' for correct issues. "
    echo
}

# ==[ CHECKS ]===================================================================================================

function _check_stack {
    f="/tmp/tmp.${RANDOM}"
    $otool -I -v "${bin}" > ${f}
    for symbol in ${stack_symbols}; do
        #test $DEBUG \
        #    && echo -e "\t>>> Checking $symbol"
        grep -q $symbol $f \
            && success "Stack guard found: $symbol" \
            && return
    #test $DEBUG && echo "$symbol"
    done && rm ${f}
    failed "Stack protector not found"
}

    #| egrep "${expr}" > /dev/null 2>&1
    #$otool -I -v "$bin" | egrep "${expr}" > /dev/null 2>&1
    #test $? -ne 0 && failed "Stack protector not found"
    #expr=$(echo $stack_symbols | sed -e 's/ /|/g')
    #$otool -I -v "$bin" | egrep "${expr}" > /dev/null 2>&1
    #if [ $? -nq 0 ]; then failed "Stack protector not found"; fi

function _check_pie {
    $otool -h -v "$bin" \
        | grep PIE > /dev/null 2>&1
        test "$?" -eq  0 \
        && success "PIE is enabled" \
        && return
        failed "PIE was not found enabled\n"
        #$otool -h -v "$bin" | grep PIE
}

    #test $? -ne 0 && failed "PIE not enabled"
    #if [ $? -nq 0 ]; then failed "[WW] No PIE could be found good"; fi

function _check_arc {
    f="/tmp/tmp.${RANDOM}"
    $otool -I -v "$bin" > ${f}
    for symbol in ${ARC_symbols}; do
        # echo -e "\t\t>>> Checking $symbol"
        grep -q $symbol $f \
            && success "ARC found: $symbol" \
            && return
    done && rm ${f}
    #test -f ${f} && rm ${f}
    failed "ARC was not found"
}
    #expr=$(echo $ARC_symbols | sed -e 's/ /|/g')
    #$otool -I -v "$bin" | egrep "${expr}" > /dev/null 2>&1
    #test $? -eq 0 && success "Automatic Reference Counting found"
    #if [ $? -nq 0 ]; then echo "[*] ARC found"; fi

function _check_badcalls {
    f="/tmp/tmp.${RANDOM}"
    $otool -I -v "$bin" > $f
    for call in ${badcalls}; do
        # echo -e "\t\t\t>>> Checking $call"
        grep -q $call $f \
            && failed "found function call $call" \
            && return
    done && rm $f
    success "No dangeours badcalls has been found"
}


# XXX check template
function _check_xxx {
    true
    #$otool -vh "$bin" | grep "$1" > /dev/null 2>&1
    #test $? -eq 0 && success "Fuck Yeah"
    #if [ $? -nq 0 ]; then echo "[*] $1 not found"; fi
}

# ==[ MAIN PROC ]================================================================================================

echo
info "======================================================"
info "> iOS app assessor"
info ">> devnull@libcrack.so "
info "======================================================"
info

otool=`which otool` || die "Please install otool from Cydia"
unzip=`which unzip` || die "Please install unzip from Cydia"

test -z "${1}" && die "Usage: ${0} <app.ipa>"

ipa="${1}"
bin="${1}"

# unpack app ipa
info "Unpacking ${ipa}"
test -e "${ipa}" || die "Cannot find ipa file ${ipa}"
unzip -qq "${ipa}" || die "Error unzipping ${ipa}"

# find app executable
info "Searching ipa binary..."
bin=$(find Payload/ \
    -type f \
    -perm 755 \
    -not \( \
        -iname "*.plist" \
        -or -iname "*.strings" \
        -or -iname "*.nib"  \
        -or -iname "*.woff" \
        -or -iname "*.otf"  \
        -or -iname "*.html" \
        -or -iname "*.png"  \
        -or -iname "*.jpg"  \
        -or -iname "*.gif"  \
        -or -iname "*.ttf"  \
        -or -iname "*.svg"  \
        -or -iname "*.svgz" \
        -or -iname "*.json" \
        -or -iname "*.car"  \
        -or -iname "*.mp3"  \
        \))
test $? -eq 0 || die "Cannot find app main executable"

# duplicated
#test $? -eq 0 || die "Cannot unzip ipa file ${ipa}"
#test -e "${bin}" || die "Cannot find binary file ${bin}"

info "Checking binary ${bin}"

#str=$(file "$bin" | awk '{print $2}')
[[ "$(file \"$bin\" | awk '{print $2}')" != "Match-O" ]] \
    || die "Located bin is not enough Match-O"

archs=`$otool -arch all -h "${bin}" \
    | grep arch \
    | cut -f2 -d\( \
    | cut -f1 -d\) \
    | awk '{print $2}'`
archs=$(echo $archs | sed -e 's/\n/ /g')

#info "Detected architectures: $archs"
info
info "Detected architectures:"
for a in ${archs}; do info "\t> ${BBLUE}${a}${RESET}"; done

# autodiscover checks
checks=$(egrep "function .*_check_" ${0} \
        | grep -v checks= \
        | awk '{print $2}')

info
info "Discovering _check_ procedures"
for check in ${checks}; do
    info "\t> Executing ${check}"
    ${check}
done

info
info "Done\n"

# # encryption
# $otool -Vl "${bin}" | grep -A4 LC_ENCRYPTION_INFO
# # PIE
# $otool -vh "${bin}" | grep "PIE DETECTED"
# # ARC
# $otool -I -v "${bin}" | grep _objc_release
# # plist
# $otool -s __TEXT __info_plist "${bin}"

# check everything
# otool -l -v "${bin}"

