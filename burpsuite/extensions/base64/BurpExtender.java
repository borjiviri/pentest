// Encode/Decode HTTP requests/responses
// borja@libcrack.so
// sab jul 26 03:15:11 CEST 2014

package burp;

import java.net.URL;
import java.util.List;
import java.util.LinkedList;

public class BurpExtender implements IBurpExtender, IHttpListener {

        private IBurpExtenderCallbacks callbacks;
        private IExtensionHelpers helpers;
        private IHttpRequestResponse currentlyDisplayedItem;

        public static String EXTENSION_NAME = "Base64 auto encode/decode";

        // ===== Implements IBurpExtender =================================================
        @Override
        public void registerExtenderCallbacks(IBurpExtenderCallbacks callbacks) {
            this.callbacks = callbacks;
            helpers = callbacks.getHelpers();
            callbacks.issueAlert(String.format("Loading extension " + EXTENSION_NAME));
            callbacks.setExtensionName(EXTENSION_NAME);
            callbacks.registerHttpListener(BurpExtender.this);
        }

        // ===== Implements IHttpListener =================================================
        @Override
        public void processHttpMessage(
                int toolFlag,
                boolean messageIsRequest,
                IHttpRequestResponse messageInfo) {

            // ----- Request processing ---------------------------------------------------

            if (messageIsRequest) {

                // Methods of IBurpExtenderCallbacks must be wrapped inside
                // try catch block as they throws java.lang.Exception
                try {

                    IRequestInfo requestInfo = helpers.analyzeRequest(messageInfo);
                    URL url = requestInfo.getUrl();

                    if(callbacks.isInScope(url)) {
                        callbacks.issueAlert("Base64 encoding full request");
                        List<String> headers = requestInfo.getHeaders();
                        String request = new String(messageInfo.getRequest());
                        String requestBody = request.substring(requestInfo.getBodyOffset());
                        // Construct new HTTP request
                        String newRequestBody = helpers.base64Encode("'" + requestBody + "'");
                        byte[] newRequest = helpers.buildHttpMessage(headers, newRequestBody.getBytes());
                        messageInfo.setRequest(newRequest);
                    }

                } catch(Exception e) {
                    e.printStackTrace();
                }

            } else {

            // ----- Response processing -------------------------------------------------

                try {

                    callbacks.issueAlert("Base64 decoding full response");
                    IResponseInfo responseInfo = helpers.analyzeResponse(messageInfo.getResponse());
                    List<String> headers = responseInfo.getHeaders();
                    String response = new String(messageInfo.getResponse());
                    String responseBody = response.substring(responseInfo.getBodyOffset());
                    // Construct new HTTP response
                    byte[] newResponseBody = helpers.base64Decode(responseBody);
                    byte[] newResponse = helpers.buildHttpMessage(headers, newResponseBody);
                    messageInfo.setResponse(newResponse);

                } catch(Exception e) {
                    e.printStackTrace();
                }

            }

        }

}
